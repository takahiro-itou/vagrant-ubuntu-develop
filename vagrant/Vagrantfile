##  -*-  coding: utf-8; mode: ruby -*-  ##
##  vi: set ft=ruby

load  File.expand_path("common/DetectOS.rb")  if File.exists?("common/DetectOS.rb")

load  File.expand_path("common/MachineInfo.rb")  if File.exists?("common/MachineInfo.rb")

machine_id = MachineInfo.machine_id

Vagrant.configure("2") do |config|
  config.vm.box = "takahiro-itou/ubuntu-jammy64-develop"
  config.vm.box_download_options = {"ssl-revoke-best-effort" => true}

  config.vm.provider "virtualbox" do |v|
    v.name   = "vagrant-ubuntu-develop"
    v.memory = "3072"

    v.gui    = false
    v.customize [
      "modifyvm",           :id,
      "--cableconnected1",  "on",
      "--hwvirtex",         "on",
      "--nestedpaging",     "on",
      "--largepages",       "on",
      "--ioapic",           "on",
      "--pae",              "on",
      "--paravirtprovider", "kvm",
    ]

    #
    # 時刻をホスト側と同期する
    #
    v.customize [
      'setextradata',     :id,
      'VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled',
      0
    ]
  end

  config.vm.boot_timeout = 900

  config.vm.network(:forwarded_port, guest: 22, host: 11022, id: "ssh")
  config.vm.network("private_network", ip: "192.168.33.10")
  config.vm.synced_folder(".", "/vagrant", disabled: true)
end

Vagrant.configure("2") do |config|
  config.trigger.after :halt do |trigger|
    trigger.run = {inline: "VBoxManage storageattach '#{machine_id}'" +
      " --storagectl 'SCSI' --port 2 --device 0 --type hdd --medium none"
    }
  end

  config.vm.provider "virtualbox" do |v|
    #
    # ディスクを追加する
    #
    disk_file = './disk/ubuntu-develop-sdc.vdi'
    unless File.exists?(disk_file)
      v.customize [
        'createmedium',     'disk',
        '--filename',       disk_file,
        '--size',           50 * 1024,
        '--format',         'VDI',
      ]
    end

    if ARGV.include?('destroy')
    else
      v.customize [
        'storageattach',    :id,
        '--storagectl',     'SCSI',
        '--port',           2,
        '--device',         0,
        '--type',           'hdd',
        '--medium',         disk_file,
      ]
    end
  end
end

# Provisioning
Vagrant.configure("2") do |config|
  config.vm.provision("userfiles1", type: "file",
                      source: "data.tar.xz",
                      destination: "/tmp/")
  config.vm.provision("userfiles2", type: "shell",
                      path: "provision.data.sh",
                      privileged: false)

  config.vm.provision("newhdd", type: "shell",
                      path: "provision.newhdd.sh",
                      privileged: true)
  config.vm.provision("root", type: "shell",
                      path: "provision.root.sh",
                      privileged: true)
  config.vm.provision("user", type: "shell",
                      path: "provision.user.sh",
                      privileged: false)
  config.vm.provision("hguser", type: "shell",
                      path: "provision.hguser.sh",
                      privileged: false)
end
